// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Rmarken5/file-broadcaster/observer (interfaces: Subscriber)

// Package observer is a generated GoMock package.
package observer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSubscriber is a mock of Subscriber interface.
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber.
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance.
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// NotifyAllWithFile mocks base method.
func (m *MockSubscriber) NotifyAllWithFile(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyAllWithFile", arg0)
}

// NotifyAllWithFile indicates an expected call of NotifyAllWithFile.
func (mr *MockSubscriberMockRecorder) NotifyAllWithFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAllWithFile", reflect.TypeOf((*MockSubscriber)(nil).NotifyAllWithFile), arg0)
}

// NotifyAllWithFiles mocks base method.
func (m *MockSubscriber) NotifyAllWithFiles(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyAllWithFiles", arg0)
}

// NotifyAllWithFiles indicates an expected call of NotifyAllWithFiles.
func (mr *MockSubscriberMockRecorder) NotifyAllWithFiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAllWithFiles", reflect.TypeOf((*MockSubscriber)(nil).NotifyAllWithFiles), arg0)
}

// Subscribe mocks base method.
func (m *MockSubscriber) Subscribe(arg0 Observer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", arg0)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscriberMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriber)(nil).Subscribe), arg0)
}

// Unsubscribe mocks base method.
func (m *MockSubscriber) Unsubscribe(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", arg0)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSubscriberMockRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubscriber)(nil).Unsubscribe), arg0)
}
