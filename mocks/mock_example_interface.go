// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package mocks

import (
	"net"
	"sync"
	"time"
)

// MockConn is a mock implementation of the Conn interface (from the package
// net) used for unit testing.
type MockConn struct {
	// CloseFunc is an instance of a mock function object controlling the
	// behavior of the method Close.
	CloseFunc *ConnCloseFunc
	// LocalAddrFunc is an instance of a mock function object controlling
	// the behavior of the method LocalAddr.
	LocalAddrFunc *ConnLocalAddrFunc
	// ReadFunc is an instance of a mock function object controlling the
	// behavior of the method Read.
	ReadFunc *ConnReadFunc
	// RemoteAddrFunc is an instance of a mock function object controlling
	// the behavior of the method RemoteAddr.
	RemoteAddrFunc *ConnRemoteAddrFunc
	// SetDeadlineFunc is an instance of a mock function object controlling
	// the behavior of the method SetDeadline.
	SetDeadlineFunc *ConnSetDeadlineFunc
	// SetReadDeadlineFunc is an instance of a mock function object
	// controlling the behavior of the method SetReadDeadline.
	SetReadDeadlineFunc *ConnSetReadDeadlineFunc
	// SetWriteDeadlineFunc is an instance of a mock function object
	// controlling the behavior of the method SetWriteDeadline.
	SetWriteDeadlineFunc *ConnSetWriteDeadlineFunc
	// WriteFunc is an instance of a mock function object controlling the
	// behavior of the method Write.
	WriteFunc *ConnWriteFunc
}

// NewMockConn creates a new mock of the Conn interface. All methods return
// zero values for all results, unless overwritten.
func NewMockConn() *MockConn {
	return &MockConn{
		CloseFunc: &ConnCloseFunc{
			defaultHook: func() error {
				return nil
			},
		},
		LocalAddrFunc: &ConnLocalAddrFunc{
			defaultHook: func() net.Addr {
				return nil
			},
		},
		ReadFunc: &ConnReadFunc{
			defaultHook: func([]byte) (int, error) {
				return 0, nil
			},
		},
		RemoteAddrFunc: &ConnRemoteAddrFunc{
			defaultHook: func() net.Addr {
				return nil
			},
		},
		SetDeadlineFunc: &ConnSetDeadlineFunc{
			defaultHook: func(time.Time) error {
				return nil
			},
		},
		SetReadDeadlineFunc: &ConnSetReadDeadlineFunc{
			defaultHook: func(time.Time) error {
				return nil
			},
		},
		SetWriteDeadlineFunc: &ConnSetWriteDeadlineFunc{
			defaultHook: func(time.Time) error {
				return nil
			},
		},
		WriteFunc: &ConnWriteFunc{
			defaultHook: func([]byte) (int, error) {
				return 0, nil
			},
		},
	}
}

// NewMockConnFrom creates a new mock of the MockConn interface. All methods
// delegate to the given implementation, unless overwritten.
func NewMockConnFrom(i net.Conn) *MockConn {
	return &MockConn{
		CloseFunc: &ConnCloseFunc{
			defaultHook: i.Close,
		},
		LocalAddrFunc: &ConnLocalAddrFunc{
			defaultHook: i.LocalAddr,
		},
		ReadFunc: &ConnReadFunc{
			defaultHook: i.Read,
		},
		RemoteAddrFunc: &ConnRemoteAddrFunc{
			defaultHook: i.RemoteAddr,
		},
		SetDeadlineFunc: &ConnSetDeadlineFunc{
			defaultHook: i.SetDeadline,
		},
		SetReadDeadlineFunc: &ConnSetReadDeadlineFunc{
			defaultHook: i.SetReadDeadline,
		},
		SetWriteDeadlineFunc: &ConnSetWriteDeadlineFunc{
			defaultHook: i.SetWriteDeadline,
		},
		WriteFunc: &ConnWriteFunc{
			defaultHook: i.Write,
		},
	}
}

// ConnCloseFunc describes the behavior when the Close method of the parent
// MockConn instance is invoked.
type ConnCloseFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []ConnCloseFuncCall
	mutex       sync.Mutex
}

// Close delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConn) Close() error {
	r0 := m.CloseFunc.nextHook()()
	m.CloseFunc.appendCall(ConnCloseFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Close method of the
// parent MockConn instance is invoked and the hook queue is empty.
func (f *ConnCloseFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Close method of the parent MockConn instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ConnCloseFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ConnCloseFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ConnCloseFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *ConnCloseFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConnCloseFunc) appendCall(r0 ConnCloseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConnCloseFuncCall objects describing the
// invocations of this function.
func (f *ConnCloseFunc) History() []ConnCloseFuncCall {
	f.mutex.Lock()
	history := make([]ConnCloseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConnCloseFuncCall is an object that describes an invocation of method
// Close on an instance of MockConn.
type ConnCloseFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConnCloseFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConnCloseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ConnLocalAddrFunc describes the behavior when the LocalAddr method of the
// parent MockConn instance is invoked.
type ConnLocalAddrFunc struct {
	defaultHook func() net.Addr
	hooks       []func() net.Addr
	history     []ConnLocalAddrFuncCall
	mutex       sync.Mutex
}

// LocalAddr delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConn) LocalAddr() net.Addr {
	r0 := m.LocalAddrFunc.nextHook()()
	m.LocalAddrFunc.appendCall(ConnLocalAddrFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the LocalAddr method of
// the parent MockConn instance is invoked and the hook queue is empty.
func (f *ConnLocalAddrFunc) SetDefaultHook(hook func() net.Addr) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LocalAddr method of the parent MockConn instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ConnLocalAddrFunc) PushHook(hook func() net.Addr) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ConnLocalAddrFunc) SetDefaultReturn(r0 net.Addr) {
	f.SetDefaultHook(func() net.Addr {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ConnLocalAddrFunc) PushReturn(r0 net.Addr) {
	f.PushHook(func() net.Addr {
		return r0
	})
}

func (f *ConnLocalAddrFunc) nextHook() func() net.Addr {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConnLocalAddrFunc) appendCall(r0 ConnLocalAddrFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConnLocalAddrFuncCall objects describing
// the invocations of this function.
func (f *ConnLocalAddrFunc) History() []ConnLocalAddrFuncCall {
	f.mutex.Lock()
	history := make([]ConnLocalAddrFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConnLocalAddrFuncCall is an object that describes an invocation of method
// LocalAddr on an instance of MockConn.
type ConnLocalAddrFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 net.Addr
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConnLocalAddrFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConnLocalAddrFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ConnReadFunc describes the behavior when the Read method of the parent
// MockConn instance is invoked.
type ConnReadFunc struct {
	defaultHook func([]byte) (int, error)
	hooks       []func([]byte) (int, error)
	history     []ConnReadFuncCall
	mutex       sync.Mutex
}

// Read delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConn) Read(v0 []byte) (int, error) {
	r0, r1 := m.ReadFunc.nextHook()(v0)
	m.ReadFunc.appendCall(ConnReadFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Read method of the
// parent MockConn instance is invoked and the hook queue is empty.
func (f *ConnReadFunc) SetDefaultHook(hook func([]byte) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Read method of the parent MockConn instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *ConnReadFunc) PushHook(hook func([]byte) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ConnReadFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func([]byte) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ConnReadFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func([]byte) (int, error) {
		return r0, r1
	})
}

func (f *ConnReadFunc) nextHook() func([]byte) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConnReadFunc) appendCall(r0 ConnReadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConnReadFuncCall objects describing the
// invocations of this function.
func (f *ConnReadFunc) History() []ConnReadFuncCall {
	f.mutex.Lock()
	history := make([]ConnReadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConnReadFuncCall is an object that describes an invocation of method Read
// on an instance of MockConn.
type ConnReadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConnReadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConnReadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ConnRemoteAddrFunc describes the behavior when the RemoteAddr method of
// the parent MockConn instance is invoked.
type ConnRemoteAddrFunc struct {
	defaultHook func() net.Addr
	hooks       []func() net.Addr
	history     []ConnRemoteAddrFuncCall
	mutex       sync.Mutex
}

// RemoteAddr delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockConn) RemoteAddr() net.Addr {
	r0 := m.RemoteAddrFunc.nextHook()()
	m.RemoteAddrFunc.appendCall(ConnRemoteAddrFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RemoteAddr method of
// the parent MockConn instance is invoked and the hook queue is empty.
func (f *ConnRemoteAddrFunc) SetDefaultHook(hook func() net.Addr) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RemoteAddr method of the parent MockConn instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ConnRemoteAddrFunc) PushHook(hook func() net.Addr) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ConnRemoteAddrFunc) SetDefaultReturn(r0 net.Addr) {
	f.SetDefaultHook(func() net.Addr {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ConnRemoteAddrFunc) PushReturn(r0 net.Addr) {
	f.PushHook(func() net.Addr {
		return r0
	})
}

func (f *ConnRemoteAddrFunc) nextHook() func() net.Addr {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConnRemoteAddrFunc) appendCall(r0 ConnRemoteAddrFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConnRemoteAddrFuncCall objects describing
// the invocations of this function.
func (f *ConnRemoteAddrFunc) History() []ConnRemoteAddrFuncCall {
	f.mutex.Lock()
	history := make([]ConnRemoteAddrFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConnRemoteAddrFuncCall is an object that describes an invocation of
// method RemoteAddr on an instance of MockConn.
type ConnRemoteAddrFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 net.Addr
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConnRemoteAddrFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConnRemoteAddrFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ConnSetDeadlineFunc describes the behavior when the SetDeadline method of
// the parent MockConn instance is invoked.
type ConnSetDeadlineFunc struct {
	defaultHook func(time.Time) error
	hooks       []func(time.Time) error
	history     []ConnSetDeadlineFuncCall
	mutex       sync.Mutex
}

// SetDeadline delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockConn) SetDeadline(v0 time.Time) error {
	r0 := m.SetDeadlineFunc.nextHook()(v0)
	m.SetDeadlineFunc.appendCall(ConnSetDeadlineFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetDeadline method
// of the parent MockConn instance is invoked and the hook queue is empty.
func (f *ConnSetDeadlineFunc) SetDefaultHook(hook func(time.Time) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetDeadline method of the parent MockConn instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ConnSetDeadlineFunc) PushHook(hook func(time.Time) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ConnSetDeadlineFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(time.Time) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ConnSetDeadlineFunc) PushReturn(r0 error) {
	f.PushHook(func(time.Time) error {
		return r0
	})
}

func (f *ConnSetDeadlineFunc) nextHook() func(time.Time) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConnSetDeadlineFunc) appendCall(r0 ConnSetDeadlineFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConnSetDeadlineFuncCall objects describing
// the invocations of this function.
func (f *ConnSetDeadlineFunc) History() []ConnSetDeadlineFuncCall {
	f.mutex.Lock()
	history := make([]ConnSetDeadlineFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConnSetDeadlineFuncCall is an object that describes an invocation of
// method SetDeadline on an instance of MockConn.
type ConnSetDeadlineFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConnSetDeadlineFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConnSetDeadlineFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ConnSetReadDeadlineFunc describes the behavior when the SetReadDeadline
// method of the parent MockConn instance is invoked.
type ConnSetReadDeadlineFunc struct {
	defaultHook func(time.Time) error
	hooks       []func(time.Time) error
	history     []ConnSetReadDeadlineFuncCall
	mutex       sync.Mutex
}

// SetReadDeadline delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockConn) SetReadDeadline(v0 time.Time) error {
	r0 := m.SetReadDeadlineFunc.nextHook()(v0)
	m.SetReadDeadlineFunc.appendCall(ConnSetReadDeadlineFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetReadDeadline
// method of the parent MockConn instance is invoked and the hook queue is
// empty.
func (f *ConnSetReadDeadlineFunc) SetDefaultHook(hook func(time.Time) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetReadDeadline method of the parent MockConn instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ConnSetReadDeadlineFunc) PushHook(hook func(time.Time) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ConnSetReadDeadlineFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(time.Time) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ConnSetReadDeadlineFunc) PushReturn(r0 error) {
	f.PushHook(func(time.Time) error {
		return r0
	})
}

func (f *ConnSetReadDeadlineFunc) nextHook() func(time.Time) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConnSetReadDeadlineFunc) appendCall(r0 ConnSetReadDeadlineFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConnSetReadDeadlineFuncCall objects
// describing the invocations of this function.
func (f *ConnSetReadDeadlineFunc) History() []ConnSetReadDeadlineFuncCall {
	f.mutex.Lock()
	history := make([]ConnSetReadDeadlineFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConnSetReadDeadlineFuncCall is an object that describes an invocation of
// method SetReadDeadline on an instance of MockConn.
type ConnSetReadDeadlineFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConnSetReadDeadlineFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConnSetReadDeadlineFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ConnSetWriteDeadlineFunc describes the behavior when the SetWriteDeadline
// method of the parent MockConn instance is invoked.
type ConnSetWriteDeadlineFunc struct {
	defaultHook func(time.Time) error
	hooks       []func(time.Time) error
	history     []ConnSetWriteDeadlineFuncCall
	mutex       sync.Mutex
}

// SetWriteDeadline delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockConn) SetWriteDeadline(v0 time.Time) error {
	r0 := m.SetWriteDeadlineFunc.nextHook()(v0)
	m.SetWriteDeadlineFunc.appendCall(ConnSetWriteDeadlineFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetWriteDeadline
// method of the parent MockConn instance is invoked and the hook queue is
// empty.
func (f *ConnSetWriteDeadlineFunc) SetDefaultHook(hook func(time.Time) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetWriteDeadline method of the parent MockConn instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ConnSetWriteDeadlineFunc) PushHook(hook func(time.Time) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ConnSetWriteDeadlineFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(time.Time) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ConnSetWriteDeadlineFunc) PushReturn(r0 error) {
	f.PushHook(func(time.Time) error {
		return r0
	})
}

func (f *ConnSetWriteDeadlineFunc) nextHook() func(time.Time) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConnSetWriteDeadlineFunc) appendCall(r0 ConnSetWriteDeadlineFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConnSetWriteDeadlineFuncCall objects
// describing the invocations of this function.
func (f *ConnSetWriteDeadlineFunc) History() []ConnSetWriteDeadlineFuncCall {
	f.mutex.Lock()
	history := make([]ConnSetWriteDeadlineFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConnSetWriteDeadlineFuncCall is an object that describes an invocation of
// method SetWriteDeadline on an instance of MockConn.
type ConnSetWriteDeadlineFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConnSetWriteDeadlineFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConnSetWriteDeadlineFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ConnWriteFunc describes the behavior when the Write method of the parent
// MockConn instance is invoked.
type ConnWriteFunc struct {
	defaultHook func([]byte) (int, error)
	hooks       []func([]byte) (int, error)
	history     []ConnWriteFuncCall
	mutex       sync.Mutex
}

// Write delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConn) Write(v0 []byte) (int, error) {
	r0, r1 := m.WriteFunc.nextHook()(v0)
	m.WriteFunc.appendCall(ConnWriteFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Write method of the
// parent MockConn instance is invoked and the hook queue is empty.
func (f *ConnWriteFunc) SetDefaultHook(hook func([]byte) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Write method of the parent MockConn instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ConnWriteFunc) PushHook(hook func([]byte) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ConnWriteFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func([]byte) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ConnWriteFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func([]byte) (int, error) {
		return r0, r1
	})
}

func (f *ConnWriteFunc) nextHook() func([]byte) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConnWriteFunc) appendCall(r0 ConnWriteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConnWriteFuncCall objects describing the
// invocations of this function.
func (f *ConnWriteFunc) History() []ConnWriteFuncCall {
	f.mutex.Lock()
	history := make([]ConnWriteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConnWriteFuncCall is an object that describes an invocation of method
// Write on an instance of MockConn.
type ConnWriteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConnWriteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConnWriteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
