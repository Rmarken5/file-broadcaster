// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Rmarken5/file-broadcaster/observer (interfaces: Subject)

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	observer "github.com/Rmarken5/file-broadcaster/observer"
	gomock "github.com/golang/mock/gomock"
)

// MockSubject is a mock of Subject interface.
type MockSubject struct {
	ctrl     *gomock.Controller
	recorder *MockSubjectMockRecorder
}

// MockSubjectMockRecorder is the mock recorder for MockSubject.
type MockSubjectMockRecorder struct {
	mock *MockSubject
}

// NewMockSubject creates a new mock instance.
func NewMockSubject(ctrl *gomock.Controller) *MockSubject {
	mock := &MockSubject{ctrl: ctrl}
	mock.recorder = &MockSubjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubject) EXPECT() *MockSubjectMockRecorder {
	return m.recorder
}

// AddFile mocks base method.
func (m *MockSubject) AddFile(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFile", arg0)
}

// AddFile indicates an expected call of AddFile.
func (mr *MockSubjectMockRecorder) AddFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFile", reflect.TypeOf((*MockSubject)(nil).AddFile), arg0)
}

// GetFiles mocks base method.
func (m *MockSubject) GetFiles() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetFiles indicates an expected call of GetFiles.
func (mr *MockSubjectMockRecorder) GetFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockSubject)(nil).GetFiles))
}

// NotifyAll mocks base method.
func (m *MockSubject) NotifyAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyAll")
}

// NotifyAll indicates an expected call of NotifyAll.
func (mr *MockSubjectMockRecorder) NotifyAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAll", reflect.TypeOf((*MockSubject)(nil).NotifyAll))
}

// RemoveFile mocks base method.
func (m *MockSubject) RemoveFile(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveFile", arg0)
}

// RemoveFile indicates an expected call of RemoveFile.
func (mr *MockSubjectMockRecorder) RemoveFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFile", reflect.TypeOf((*MockSubject)(nil).RemoveFile), arg0)
}

// SetFiles mocks base method.
func (m *MockSubject) SetFiles(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFiles", arg0)
}

// SetFiles indicates an expected call of SetFiles.
func (mr *MockSubjectMockRecorder) SetFiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFiles", reflect.TypeOf((*MockSubject)(nil).SetFiles), arg0)
}

// Subscribe mocks base method.
func (m *MockSubject) Subscribe(arg0 observer.Observer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", arg0)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubjectMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubject)(nil).Subscribe), arg0)
}

// Unsubscribe mocks base method.
func (m *MockSubject) Unsubscribe(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", arg0)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSubjectMockRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubject)(nil).Unsubscribe), arg0)
}
